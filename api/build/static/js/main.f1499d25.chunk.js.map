{"version":3,"sources":["components/Button/Button.js","components/Navbar/Navbar.js","utils/API.js","components/Snippet/SnippetCard/SnippetCard.js","components/Snippet/SnippetContainer/SnippetContainer.js","components/Modal/ModalHeader/ModalHeader.js","hooks/useInput.js","components/Snippet/SnippetForm/SnippetForm.js","components/Modal/ModalBody/ModalBody.js","components/Modal/ModalFooter/ModalFooter.js","components/Modal/ModalContainer/ModalContainer.js","hooks/useToggle.js","components/Footer/Footer.js","hooks/useReload.js","App.js","reportWebVitals.js","index.js"],"names":["Button","buttonContent","buttonCallback","buttonType","className","onClick","type","defaultProps","console","log","Navbar","setShowModal","baseURL","getCodeSnippets","a","axios","get","codeSnippets","Error","postCodeSnippet","snippetTitle","snippetContent","post","postedCodeSnippet","updateCodeSnippet","snippetID","put","updatedCodeSnippet","deleteCodeSnippet","delete","deletedCodeSnippet","SnippetCard","dataID","index","setReload","useState","editMode","setEditMode","originalSnippet","setOriginalSnippet","updatedSnippet","setUpdatedSnippet","setSnippetID","snippetInput","setSnippetInput","useEffect","toggleEditMode","handleCopy","event","stopPropagation","navigator","clipboard","writeText","error","name","value","readOnly","onChange","target","rows","cols","prev","SnippetContainer","reload","memoGetCodeSnippets","currentSnippets","setCurrentSnippets","then","data","catch","snippetsArray","map","snippet","_id","ModalHeader","useInput","initialInput","input","setInput","handleInputChange","resetInputChange","SnippetForm","inputName","setInputName","inputContent","setInputContent","nameWarning","setNameWarning","codeWarning","setCodeWarning","onSubmit","preventDefault","nameValue","codeValue","placeholder","required","columns","ModalBody","ModalFooter","ModalContainer","show","ReactDOM","createPortal","document","getElementById","useToggle","initialState","toggleState","setToggleState","handleToggle","handleToggleTrue","handleToggleFalse","Footer","href","rel","useReload","callback","memoCallback","useCallback","App","showModal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.f1499d25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ buttonContent, buttonCallback, buttonType }) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName=\"Button transform transition duration-500 px-5 rounded-full bg-pink-300 hover:bg-pink-500 hover:bg-opacity-50 ring ring-transparent hover:ring hover:ring-white bg-opacity-50\" \r\n\t\t\tonClick={ buttonCallback }\r\n\t\t\ttype={ buttonType }\r\n\t\t>\r\n\t\t\t{ buttonContent }\r\n\t\t</button>\r\n\t)\r\n};\r\n\r\nButton.defaultProps = {\r\n\tbuttonContent: \"Button\",\r\n\tbuttonCallback: () => {console.log(\"Button Clicked!\")},\r\n\tbuttonType: \"button\"\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../Button/Button\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = ({ setShowModal }) => {\r\n\treturn (\r\n\t\t<nav className=\"Navbar flex flex-row justify-between p-3 bg-gradient-to-r from-red-900 to-pink-800 text-white font-medium\"> \r\n\t\t\t<h1 className=\"text-3xl px-8\">CodePasta🍝</h1>\r\n\t\t\t<ul className=\"flex flex-row justify-between\">\r\n\t\t\t\t<li className=\"p-2\">\r\n\t\t\t\t\t<Button buttonContent=\"+ New Snippet\" buttonCallback={ setShowModal } buttonType=\"button\"/>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t)\r\n};\r\n\r\nexport default Navbar;","import axios from \"axios\";\r\n// Currently set to our backend which lives on a different localhost instance. Change this for production build.\r\nconst baseURL = \"http://localhost:3001/api/codesnippets/\"\r\n\r\nexport const getCodeSnippets = async () => {\r\n\ttry {\r\n\t\tconst codeSnippets = await axios.get(baseURL);\r\n\t\treturn codeSnippets;\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in fetching API!\");\r\n\t\tthrow new Error(error);\r\n\t}\r\n};\r\n\r\nexport const postCodeSnippet = async (snippetTitle, snippetContent) => {\r\n\ttry {\r\n\t\tconst postedCodeSnippet = await axios.post(baseURL, {\r\n\t\t\tsnippetTitle: snippetTitle,\r\n\t\t\tsnippetContent: snippetContent\r\n\t\t});\r\n\t\tconsole.log(\"Successfully POSTed:\", postedCodeSnippet)\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in POST request to API!\");\r\n\t}\r\n};\r\n\r\nexport const updateCodeSnippet = async (snippetID, snippetTitle, snippetContent) => {\r\n\ttry {\r\n\t\tconst updatedCodeSnippet = await axios.put(baseURL + snippetID, {\r\n\t\t\tsnippetTitle: snippetTitle,\r\n\t\t\tsnippetContent: snippetContent\r\n\t\t});\r\n\t\tconsole.log(\"Successfully PUTed:\", updatedCodeSnippet);\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in PUT request to API!\");\r\n\t}\r\n};\r\n\r\nexport const deleteCodeSnippet = async snippetID => {\r\n\ttry {\r\n\t\tconst deletedCodeSnippet = await axios.delete(baseURL + snippetID);\r\n\t\tconsole.log(\"Successfully DELETed:\", deletedCodeSnippet);\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in DELETE request to API!\");\r\n\t}\r\n};\r\n\r\nconst API = {\r\n\tgetCodeSnippets,\r\n\tpostCodeSnippet,\r\n\tupdateCodeSnippet,\r\n\tdeleteCodeSnippet\r\n};\r\n\r\nexport default API;","import React, { useEffect, useState } from \"react\";\nimport Button from \"../../Button/Button\";\nimport \"./SnippetCard.css\";\n\nimport { updateCodeSnippet, deleteCodeSnippet } from \"../../../utils/API\";\n\nconst SnippetCard = ({ snippetTitle, snippetContent, dataID, index, setReload }) => {\n\tconst [ editMode, setEditMode ] = useState(false);\n\tconst [ originalSnippet, setOriginalSnippet ] = useState(\"\");\n\tconst [ updatedSnippet, setUpdatedSnippet ] = useState(\"\");\n\tconst [ snippetID, setSnippetID ] = useState(\"\");\n\tconst [ snippetInput, setSnippetInput ] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tsetSnippetInput(snippetContent);\n\t\tsetOriginalSnippet(snippetContent);\n\t\tsetSnippetID(dataID);\n\t}, [dataID, snippetContent]);\n\n\tuseEffect(() => {\n\t\tsetUpdatedSnippet(snippetInput);\n\t}, [snippetInput]);\n\t\n\tconst toggleEditMode = () => {\n\t\tsetEditMode(!editMode);\n\t};\n\n\tconst handleInput = event => {\n\t\tsetSnippetInput(event.target.value);\n\t};\n\t\n\tconst handleUpdate = event => {\n\t\tevent.stopPropagation();\n\t\tconsole.log(snippetInput);\n\t\tsetUpdatedSnippet(snippetInput);\n\t\tupdateCodeSnippet(snippetID, snippetTitle, updatedSnippet);\n\t\tsetOriginalSnippet(updatedSnippet);\n\t\ttoggleEditMode();\n\t\tsetReload(prev => !prev);\n\t};\n\n\tconst handleCancel = event => {\n\t\tevent.stopPropagation();\n\t\tsetSnippetInput(originalSnippet);\n\t\tsetEditMode(false);\n\t\tsetReload(prev => !prev);\n\t};\n\t\n\tconst handleDelete = event => {\n\t\tevent.stopPropagation();\n\t\tdeleteCodeSnippet(snippetID);\n\t\tsetReload(prev => !prev);\n\t};\n\n\t// This is async because the writeText() method returns a promise, and it can break because of user permissions.\n\tconst handleCopy = async event => {\n\t\ttry {\n\t\t\tevent.stopPropagation();\n\t\t\tnavigator.clipboard.writeText(originalSnippet);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"SnippetCard flex flex-col justify-between mx-12 lg:mx-16 xl:mx-32 my-3 rounded-xl bg-pink-400 bg-opacity-50 font-light\"> \n\t\t\t<h3 className=\"rounded-t-xl p-2 bg-pink-600 bg-opacity-50 text-2xl\">{ snippetTitle }</h3>\n\t\t\t<div className=\"p-5\">\n\t\t\t\t<pre className=\"flex flex-col justify-items-stretch text-left whitespace-pre-wrap\">\n\t\t\t\t\t<label name={ `SnippetCard-textarea-${ index }` }></label>\n\t\t\t\t\t<textarea \n\t\t\t\t\t\tclassName=\"resize-none box-content bg-transparent border-box focus:outline-none font-mono\" \n\t\t\t\t\t\tname={ `SnippetCard-textarea-${ index }` } \n\t\t\t\t\t\tvalue={ snippetInput } \n\t\t\t\t\t\treadOnly={ !editMode }\n\t\t\t\t\t\tonChange={ editMode ? handleInput : null } \n\t\t\t\t\t\trows=\"12\" \n\t\t\t\t\t\tcols=\"40\">\n\t\t\t\t\t</textarea> \n\t\t\t\t</pre>\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-row justify-evenly p-2 rounded-b-xl bg-pink-700 bg-opacity-50\">\n\t\t\t\t{ editMode\n\t\t\t\t\t? null\n\t\t\t\t\t: <Button buttonContent=\"📋\" buttonCallback={ handleCopy } />\n\t\t\t\t}\n\t\t\t\t<Button buttonContent={ editMode ? \"Submit\" : \"Update\"} buttonCallback={ editMode ? handleUpdate : toggleEditMode }/>\n\t\t\t\t{ editMode \n\t\t\t\t\t? <Button buttonContent=\"Cancel\" buttonCallback={ handleCancel } />\n\t\t\t\t\t: <Button buttonContent=\"Delete\" buttonCallback={ handleDelete } />  \n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nSnippetCard.defaultProps = {\n\tsnippetTitle: \"Hello World!\",\n\tsnippetContent: \"console.log('Hello World!')\"\n};\n\nexport default SnippetCard;","import React, { useEffect, useState } from \"react\";\r\nimport SnippetCard from \"../SnippetCard/SnippetCard\";\r\nimport \"./SnippetContainer.css\";\r\n\r\nconst SnippetContainer = ({ reload, setReload, memoGetCodeSnippets}) => {\r\n\tconst [ currentSnippets, setCurrentSnippets ] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tmemoGetCodeSnippets()\r\n\t\t\t.then(({ data }) => setCurrentSnippets(data))\r\n\t\t\t.catch(error => new Error(error));\r\n\t}, [memoGetCodeSnippets, reload]);\r\n\r\n\tconst generateSnippetCards = snippetsArray => {\r\n\t\treturn snippetsArray.map((snippet, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<SnippetCard \r\n\t\t\t\t\tkey={ snippet._id }\r\n\t\t\t\t\tindex={ index }\r\n\t\t\t\t\tdataID={ snippet._id }\r\n\t\t\t\t\tsnippetTitle={ snippet.snippetTitle }\r\n\t\t\t\t\tsnippetContent={ snippet.snippetContent }\r\n\t\t\t\t\tsetReload={setReload}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"SnippetContainer grid grid-cols-1 md:grid-cols-2 2xl:grid-cols-3 gap-10 py-10 min-h-screen lg:min-h-full\"> \r\n\t\t\t{ generateSnippetCards(currentSnippets) }\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default SnippetContainer;","import React from \"react\";\r\nimport \"./ModalHeader.css\";\r\nimport Button from \"../../Button/Button\";\r\n\r\nconst ModalHeader = ({ setShowModal }) => {\r\n\treturn (\r\n\t\t<div className=\"ModalHeader flex justify-between w-1/2 rounded-t-xl p-2 bg-pink-500 text-2xl\">\r\n\t\t\t<h4 className=\"ml-5\">New Snippet</h4>\r\n\t\t\t<div className=\"mr-1\">\r\n\t\t\t\t<Button buttonContent=\"X\" buttonCallback={ setShowModal }/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ModalHeader;","import { useState } from \"react\";\n\nconst useInput = (initialInput = \"\") => {\n    const [ input, setInput ] = useState(initialInput);\n\n    const handleInputChange = event => {\n        setInput(event.target.value);\n    };\n    const resetInputChange = () => {\n        setInput(\"\");\n    }\n    return [input, handleInputChange, resetInputChange]\n};\n\nexport default useInput;","import React, { useState } from \"react\";\nimport \"./SnippetForm.css\";\nimport useInput from \"../../../hooks/useInput\";\nimport { postCodeSnippet } from \"../../../utils/API\";\n\nconst SnippetForm = ({ setShowModal, setReload }) => {\n    const [ inputName, setInputName ] = useInput(\"\");\n    const [ inputContent, setInputContent ] = useInput(\"\");\n\tconst [ nameWarning, setNameWarning ] = useState(false);\n\tconst [ codeWarning, setCodeWarning ] = useState(false);\n\n\tconst handleSubmit = event => {\n\t\tevent.preventDefault();\n\t\t\n\t\t// Resets the warning states to false so we can run form validation again.\n\t\tsetNameWarning(false);\n\t\tsetCodeWarning(false);\n\n\t\t// The submit event shoves both inputs into an array on the event.target attribute.\n\t\tconst nameValue = event.target[0].value;\n\t\tconst codeValue = event.target[1].value;\n\t\tconsole.log(nameValue, codeValue)\n\n\t\t// Validation for the inputs. If either aren't inputted, then we set the respective warning states to true and render warning markup, and stop the POST request from being made.\n\t\tif (nameValue === \"\"){\n\t\t\tsetNameWarning(true);\n\t\t};\n\t\tif (codeValue === \"\"){\n\t\t\tsetCodeWarning(true);\n\t\t};\n\t\tif (nameWarning || codeWarning){\n\t\t\treturn;\n\t\t}\n\t\tpostCodeSnippet(nameValue, codeValue);\n\t\tsetShowModal(false);\n\t\tsetReload(prev => !prev);\n\t\t// document.location.reload();\n\t};\n    \n\treturn (\n\t\t<div className=\"SnippetForm\">\n            <form className=\"flex flex-col items-center\" onSubmit={ handleSubmit }>\n                <label className=\"pt-2 mb-2\">Snippet Name { nameWarning ? <span className=\"text-yellow-300\"> Please input a name!</span> : null }</label>\n                <input className=\"w-1/3 box-content bg-pink-800 border border-solid border-white rounded-lg ring-1 ring-white ring-offset-2 focus:outline-none font-mono\" type=\"text\" placeholder=\"// Function Foo\" required={ true } value={ inputName } onChange={ setInputName }></input>\n                <label className=\"pt-2 mb-2\">Snippet Content { codeWarning ? <span className=\"text-yellow-300\"> Please input code!</span> : null }</label>\n                <textarea className=\"w-1/3 resize-none box-content bg-transparent border border-solid border-white rounded-lg ring-1 ring-white ring-offset-2 focus:outline-none font-mono\" type=\"text\" placeholder=\"foo => console.log('bar')\" rows={12} columns={40} required={ true } value={ inputContent } onChange={ setInputContent }></textarea>\n\t\t\t\t<input className=\"transform transition duration-500 mt-6 px-5 rounded-full bg-pink-300 hover:bg-pink-500 hover:bg-opacity-50 ring ring-transparent hover:ring hover:ring-white bg-opacity-50\" type=\"submit\" value=\"Submit!\"></input>\n            </form>\n        </div>\n\t)\n};\n\nexport default SnippetForm;","import React from \"react\";\nimport \"./ModalBody.css\";\nimport SnippetForm from \"../../Snippet/SnippetForm/SnippetForm\";\n\nconst ModalBody = ({ setShowModal, setReload }) => {\n\treturn (\n\t\t<div className=\"ModalBody w-1/2 pt-4 bg-pink-800 bg-opacity-80\">\n\t\t\t<SnippetForm setShowModal={ setShowModal } setReload={ setReload } />\n\t\t</div>\n\t)\n};\n\nexport default ModalBody;","import React from \"react\";\r\nimport \"./ModalFooter.css\";\r\n\r\nconst ModalFooter = () => {\r\n\treturn (\r\n\t\t<div className=\"ModalFooter w-1/2 pb-5 pt-7 rounded-b-lg bg-pink-800 bg-opacity-80 text-center\">\r\n\t\t\t<h5 className=\"text-md\">Any code formatting you make <b>will</b> be imported.</h5>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ModalFooter;","// Note that for the current modal I have set up, it statically generates the SnippetForm component in the ModalBody.\n// Ideally, one should be able to pass in props to set the ModalBody to different components, if this were to be reused.\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ModalHeader from \"../ModalHeader/ModalHeader\";\nimport ModalBody from \"../ModalBody/ModalBody\";\nimport ModalFooter from \"../ModalFooter/ModalFooter\";\nimport \"./ModalContainer.css\";\n\nconst ModalContainer = ({ show, setShowModal, setReload }) => {\n\tif (!show) {\n\t\treturn null;\n\t};\n\n\treturn ReactDOM.createPortal(\n\t\t<div className=\"ModalContainer backdrop-filter backdrop-blur backdrop-saturate-50 fixed flex flex-col items-center justify-center inset-0 bg-pink-200 bg-opacity-50 text-white\">\n\t\t\t<ModalHeader setShowModal={ setShowModal } />\n\t\t\t<ModalBody setShowModal={ setShowModal } setReload={ setReload }/>\n\t\t\t<ModalFooter />\n\t\t</div>, \n\t\tdocument.getElementById(\"root\")\n\t)\n};\n\nexport default ModalContainer;","import { useState } from \"react\";\n\nconst useToggle = (initialState = true) => {\n    const [ toggleState, setToggleState ] = useState(initialState);\n\n    const handleToggle = () => {\n        setToggleState(!toggleState);\n    };\n\n\tconst handleToggleTrue = () => {\n\t\tsetToggleState(true);\n\t};\n\n\tconst handleToggleFalse = () => {\n\t\tsetToggleState(false);\n\t};\n\n    return [toggleState, handleToggle, handleToggleTrue, handleToggleFalse];\n};\n\nexport default useToggle;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<footer className=\"text-base p-3 bg-gradient-to-l from-yellow-800 to-pink-800\">\r\n\t\t\t<h5>Made with <a href=\"https://reactjs.org/\" rel=\"noreferrer\" target=\"_blank\">React ⚛</a>, <a href=\"https://tailwindcss.com/\" rel=\"noreferrer\" target=\"_blank\">Tailwind CSS 💨</a>, 💉 & 😅 & 😭.</h5>\r\n\t\t\t<h6 className=\"text-sm\">Neil Chen, 2021.</h6>\r\n\t\t</footer>\r\n\t)\r\n};\r\n\r\nexport default Footer;","// Custom React Hook for non-opinionated rerendering, it's probably very jank so don't rely on this and get better at state management and useEffect().\r\n// Pass in a callback you want to memoize, the initialState.\r\n// What is returned is the reload state, setter for the reload state, and the memoized callback.\r\n// Use a useEffect() hook in the component you want to rerender, then add the reload state as a dependency, then pass the setter for the reload state to whatever you want to cause rerendering.\r\n// The setter should called with a function, like `setReload(prev => !prev)`.\r\n\r\nimport { useState, useCallback } from \"react\";\r\n\r\nconst useReload = (callback, initialState = false) => {\r\n\tconst [ reload, setReload ] = useState(initialState);\r\n\tconst memoCallback = useCallback(callback, [callback, reload]);\r\n\tif (!callback) {\r\n\t\tthrow new Error(\"useReload requires a callback to memoize.\");\r\n\t};\r\n\r\n\treturn [ reload, setReload, memoCallback ];\r\n};\r\n\r\nexport default useReload;","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport SnippetContainer from \"./components/Snippet/SnippetContainer/SnippetContainer\";\nimport ModalContainer from \"./components/Modal/ModalContainer/ModalContainer\";\nimport useToggle from \"./hooks/useToggle\";\nimport Footer from \"./components/Footer/Footer\";\nimport useReload from \"./hooks/useReload\";\nimport { getCodeSnippets } from \"./utils/API\";\n\nfunction App() {\n\tconst [ showModal, setShowModal ] = useToggle(false);\n\tconst [ reload, setReload, memoGetCodeSnippets ] = useReload(getCodeSnippets, false);\n\n    return (\n        <div className=\"App min-h-full min-w-full lg:min-h-screen lg:min-w-screen text-white\">\n\t\t\t<Navbar setShowModal={ setShowModal } />\n\t\t\t<section className=\"divide-y divide-solid divide-pink-200\">\n\t\t\t\t<h1 className=\"rounded-full bg-pink-700 bg-opacity-50 p-5 mx-32 my-10 text-4xl\">\n\t\t\t\t\tCode Snippets that you can save and reference for any project.\n\t\t\t\t</h1>\n\t\t\t\t<SnippetContainer reload={reload} setReload={ setReload } memoGetCodeSnippets={ memoGetCodeSnippets } />\n\t\t\t\t<ModalContainer show={ showModal } setShowModal={ setShowModal } setReload={ setReload } />\n\t\t\t</section>\n\t\t\t<Footer />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}